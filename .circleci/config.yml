version: 2.1

orbs:
  act:
    commands:
      install:
        description: Install Act for running GitHub Actions locally
        parameters:
          version:
            type: string
            default: "latest"
            description: The version of Act to install
          debug:
            type: boolean
            default: false
            description: Enable debug logging for installing Act
          bin-dir:
            type: string
            default: "/home/circleci/bin"
            description: The directory where Act should be installed
        steps:
          - run:
              name: "Installing Act << parameters.version >>"
              command: |
                # Set the bin-dir and debug flags based on the parameters
                BIN_DIR_FLAG=""
                DEBUG_FLAG=""

                # Check if a custom bin directory is set
                if [[ "<< parameters.bin-dir >>" != "./bin" ]]; then
                  BIN_DIR_FLAG="-b << parameters.bin-dir >>"
                fi

                # Enable debug logging if the debug parameter is true
                if [[ "<< parameters.debug >>" == "true" ]]; then
                  DEBUG_FLAG="-d"
                fi

                # Install Act with the specified version, bin-dir, and debug options
                curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash -s -- $BIN_DIR_FLAG $DEBUG_FLAG << parameters.version >>

      create-env-and-secret-file:
        description: Generate environment and secrets files for Act
        parameters:
          env-file:
            type: string
            default: /tmp/act.env
            description: Path to store environment variables file
          secret-file:
            type: string
            default: /tmp/act.secrets
            description: Path to store secret variables file
          secrets:
            type: string
            default: GITHUB_TOKEN
            description: A comma-separated list of environment variables treated as secrets
        steps:
          - run:
              name: Generate Environment and Secrets Files
              command: |
                # Get environment variables directly from the env command
                echo "Fetching environment variables..."
                IFS=$'\n'
                ALL_ENV_VARS=($(env))
                
                # Convert the comma-separated secrets parameter into an array
                IFS=',' read -ra SECRETS \<<< "<< parameters.secrets >>"
                
                # Create associative arrays for action and secret variables
                declare -A ACTION_ENV_VARS
                declare -A SECRET_ENV_VARS
                
                # Process environment variables directly
                for VAR in "${ALL_ENV_VARS[@]}"; do
                  KEY=${VAR%%=*}
                  VALUE=${VAR#*=}
                  IS_SECRET=false
                  
                  for SECRET in "${SECRETS[@]}"; do
                    if [[ $KEY == "$SECRET" ]]; then
                      IS_SECRET=true
                      break
                    fi
                  done

                  if [[ $IS_SECRET == true ]]; then
                    SECRET_ENV_VARS[$KEY]=$VALUE
                  else
                    ACTION_ENV_VARS[$KEY]=$VALUE
                  fi
                done

                # Write ACTION_ENV_VARS to the .env file
                echo "Writing non-sensitive environment variables to << parameters.env-file >>"
                for KEY in "${!ACTION_ENV_VARS[@]}"; do
                  echo "$KEY=${ACTION_ENV_VARS[$KEY]}" >> << parameters.env-file >>
                done
                
                # Write SECRET_ENV_VARS to the .secrets file
                echo "Writing sensitive environment variables to << parameters.secret-file >>"
                for KEY in "${!SECRET_ENV_VARS[@]}"; do
                  echo "$KEY=${SECRET_ENV_VARS[$KEY]}" >> << parameters.secret-file >>
                done

      create-workflow-file:
        description: Generate a GitHub Actions-like workflow YAML file
        parameters:
          workflow-file:
            type: string
            default: /tmp/workflow.yml
            description: Path to store the generated GitHub Actions-like workflow YAML file
          action:
            type: string
            description: The GitHub Action to execute (e.g. actions/checkout@v2)
          with:
            default: ""
            type: string
            description: Key-value pairs for the `with` block
          env:
            type: string
            default: ""
            description: Key-value pairs for the `env` block
          workflow-name:
            type: string
            default: "circleci"
            description: Name of the workflow
          workflow-event:
            type: string
            default: "push"
            description: Event that triggers the workflow (e.g. push, pull_request)
          job-name:
            type: string
            default: "action"
            description: Name of the job
          runs-on-image:
            type: string
            default: "ubuntu-latest"
            description: Image to run the job on (e.g. ubuntu-latest, windows-latest)
        steps:
          - run:
              name: Generate Workflow YAML
              command: |
                # Check if the 'action' parameter is set
                if [ -z "<< parameters.action >>" ]; then
                  echo "Error: The 'action' parameter is required but not set."
                  echo "If you are trying to pass in a workflow, please set skip-create-workflow-file to true to avoid this error."
                  exit 1
                fi

                # Capture 'with' and 'env' inputs directly
                WITH_STRING=$(cat \<<EOF
                << parameters.with >>
                EOF
                )

                ENV_STRING=$(cat \<<EOF
                << parameters.env >>
                EOF
                )

                # Format 'with' parameter
                if [ -n "$WITH_STRING" ]; then
                  formatted_with="$(echo "$WITH_STRING" | sed 's/^/          /')"
                else
                  formatted_with=""
                fi

                # Format 'env' parameter
                if [ -n "$ENV_STRING" ]; then
                  formatted_env="$(echo "$ENV_STRING" | sed 's/^/          /')"
                else
                  formatted_env=""
                fi

                # Generate the workflow YAML file
                cat \<<EOF > << parameters.workflow-file >>
                name: << parameters.workflow-name >>
                on: << parameters.workflow-event >>
                jobs:
                  << parameters.job-name >>:
                    runs-on: << parameters.runs-on-image >>
                    steps:
                      - uses: << parameters.action >>
                $(if [ -n "$formatted_with" ]; then echo "        with:"; echo "$formatted_with"; fi)
                $(if [ -n "$formatted_env" ]; then echo "        env:"; echo "$formatted_env"; fi)
                EOF

                # Echo the workflow file for debugging
                echo "Generated workflow: $(cat << parameters.workflow-file >>)"
                
                echo "Generated workflow YAML file at << parameters.workflow-file >>"

      run-act:
        description: Run a workflow YAML file using Act 
        parameters:
          workflow-file:
            type: string
            default: /tmp/workflow.yml
            description: Path to the workflow file to execute
          platform:
            type: string
            default: ubuntu-latest=node:16-buster-slim
            description: Custom image to use per platform
          env-file:
            type: string
            default: /tmp/act.env
            description: Path to the environment variables file
          secret-file:
            type: string
            default: /tmp/act.secrets
            description: Path to the secret variables file
          event-file:
            type: string
            default: /tmp/act.event
            description: Path to the event JSON file
          actor:
            type: string
            default: nektos/act
            description: User that triggered the event
          bind:
            type: boolean
            default: true
            description: Enables the bind flag which binds working directory to container, rather than copy
          verbose:
            type: boolean
            default: false
            description: Enables detailed output logs
          detect-event:
            type: boolean
            default: true
            description: Automatically detects and uses the first event type in the workflow
          directory:
            type: string
            default: .
            description: Working directory for the workflow
          action-offline-mode:
            type: boolean
            default: false
            description: Enable offline mode for actions (runs without fetching actions from remote sources)
          cache-actions:
            type: boolean
            default: true
            description:  Enables caching of actions using CircleCI caching
          defaultbranch:
            type: string
            default: main
            description: Specifies the default branch to use
          job:
            type: string
            default: ""
            description: Specifies a specific job ID to run
          pull:
            type: boolean
            default: true
            description: Forces pulling of Docker images even if already present
          rebuild:
            type: boolean
            default: true
            description: Rebuilds local Docker images even if already present
          remote-name:
            type: string
            default: origin
            description: Specifies the Git remote name for retrieving the repo URL
          reuse:
            type: boolean
            default: false
            description: Prevents container removal after successful runs for maintaining state
          input-file:
            type: string
            default: .input
            description: Path to the file containing action inputs
          var-file:
            type: string
            default: .vars
            description: Path to the file containing variable definitions
          additional-act-flags:
            type: string
            default: ""
            description: Additional flags to be passed to the `act` CLI
        steps:
          - when:
              condition: << parameters.cache-actions >>
              steps:
                - restore_cache:
                    name: Restoring cache for Act...
                    keys:
                      - act-cache-{{ checksum "<< parameters.workflow-file >>" }}
                      - act-cache
          - run:
              name: Run Act
              command: |
                # Build the base `act` command
                act_cmd="act"

                if [ ! -f "<< parameters.workflow-file >>" ]; then
                  echo "Error: Workflow file not found at path '<< parameters.workflow-file >>'."
                  exit 1
                else
                  act_cmd="$act_cmd --workflows << parameters.workflow-file >>"
                fi

                if [ ! -f "<< parameters.env-file >>" ]; then
                  echo "Warning: Env file not found at << parameters.env-file >>. Skipping..."
                else
                  act_cmd="$act_cmd --env-file << parameters.env-file >>"
                fi

                if [ ! -f "<< parameters.secret-file >>" ]; then
                  echo "Warning: Secret file not found at << parameters.secret-file >>. Skipping..."
                else
                  act_cmd="$act_cmd --secret-file << parameters.secret-file >>"
                fi

                if [ ! -f "<< parameters.input-file >>" ]; then
                  echo "Warning: Input file not found at << parameters.input-file >>. Skipping..."
                else
                  act_cmd="$act_cmd --input-file << parameters.input-file >>"
                fi

                if [ ! -f "<< parameters.var-file >>" ]; then
                  echo "Warning: Var file not found at << parameters.var-file >>. Skipping..."
                else
                  act_cmd="$act_cmd --var-file << parameters.var-file >>"
                fi

                if [ ! -f "<< parameters.event-file >>" ]; then
                  echo "Warning: Event file not found at << parameters.event-file >>. Skipping..."
                else
                  act_cmd="$act_cmd --eventpath << parameters.event-file >>"
                fi

                # Add parameters with valid defaults
                act_cmd="$act_cmd --platform << parameters.platform >>"
                act_cmd="$act_cmd --directory << parameters.directory >>"
                act_cmd="$act_cmd --defaultbranch << parameters.defaultbranch >>"
                act_cmd="$act_cmd --remote-name << parameters.remote-name >>"
                act_cmd="$act_cmd --actor << parameters.actor >>"

                # Check for job 
                if [ -n "<< parameters.job >>" ]; then
                  act_cmd="$act_cmd --job << parameters.job >>"
                fi

                # Check boolean flags
                if [ << parameters.pull >> = true ]; then
                  act_cmd="$act_cmd --pull"
                fi
                if [ << parameters.rebuild >> = true ]; then
                  act_cmd="$act_cmd --rebuild"
                fi
                if [ << parameters.reuse >> = true ]; then
                  act_cmd="$act_cmd --reuse"
                fi
                if [ << parameters.detect-event >> = true ]; then
                  act_cmd="$act_cmd --detect-event"
                fi
                if [ << parameters.bind >> = true ]; then
                  act_cmd="$act_cmd --bind"
                fi
                if [ << parameters.verbose >> = true ]; then
                  act_cmd="$act_cmd --verbose"
                fi
                if [ << parameters.action-offline-mode >> = true ]; then
                  act_cmd="$act_cmd --action-offline-mode"
                fi

                # Include additional flags if provided
                if [ -n "<< parameters.additional-act-flags >>" ]; then
                  act_cmd="$act_cmd << parameters.additional-act-flags >>"
                fi

                # Echo the final command for debugging
                echo "Running command: $act_cmd"

                # Run the `act` command
                eval "$act_cmd"
          - when:
              condition: << parameters.cache-actions >>
              steps:
                - save_cache:
                    name: Saving cache for Act...
                    key: act-cache-{{ checksum "<< parameters.workflow-file >>" }}
                    paths:
                      - ~/.cache/act

      act:
        description: Handles setting up the needed environment and running Act
        parameters:
          checkout:
            type: boolean
            default: true
            description: Checkout the CircleCI repository before running Act
          version:
            type: string
            default: "latest"
            description: The version of Act to install
          debug:
            type: boolean
            default: false
            description: Enable debug logging for installing Act
          bin-dir:
            type: string
            default: "/home/circleci/bin"
            description: The directory where Act should be installed
          env-file:
            type: string
            default: /tmp/act.env
            description: Path to store or fetch the environment variables file
          secret-file:
            type: string
            default: /tmp/act.secrets
            description: Path to store or fetch the secret variables file
          secrets:
            type: string
            default: GITHUB_TOKEN
            description: A comma-separated list of environment variables treated as secrets
          workflow-file:
            type: string
            default: /tmp/workflow.yml
            description: Path to store or fetch the workflow file to execute
          uses:
            type: string
            default: ""
            description: The GitHub Action to execute (e.g. actions/checkout@v2)
          with:
            default: ""
            type: string
            description: Key-value pairs for the `with` block
          env:
            type: string
            default: ""
            description: Key-value pairs for the `env` block
          workflow-name:
            type: string
            default: "circleci"
            description: Name of the workflow
          workflow-event:
            type: string
            default: "push"
            description: Event that triggers the workflow (e.g. push, pull_request)
          job-name:
            type: string
            default: "action"
            description: Name of the job
          runs-on-image:
            type: string
            default: "ubuntu-latest"
            description: Image to run the job on (e.g. ubuntu-latest, windows-latest)
          platform:
            type: string
            default: ubuntu-latest=node:16-buster-slim
            description: Custom image to use per platform
          event-file:
            type: string
            default: /tmp/act.event
            description: Path to the event JSON file
          actor:
            type: string
            default: nektos/act
            description: User that triggered the event
          bind:
            type: boolean
            default: true
            description: Enables the bind flag which binds working directory to container, rather than copy
          verbose:
            type: boolean
            default: false
            description: Enables detailed output logs
          detect-event:
            type: boolean
            default: true
            description: Automatically detects and uses the first event type in the workflow
          directory:
            type: string
            default: .
            description: Working directory for the workflow
          action-offline-mode:
            type: boolean
            default: false
            description: Enable offline mode for actions (runs without fetching actions from remote sources)
          cache-actions:
            type: boolean
            default: true
            description:  Enables caching of GitHub Actions using CircleCI caching
          defaultbranch:
            type: string
            default: main
            description: Specifies the default branch to use
          job:
            type: string
            default: ""
            description: Specifies a specific job ID to run
          pull:
            type: boolean
            default: false
            description: Forces pulling of Docker images even if already present
          rebuild:
            type: boolean
            default: false
            description: Rebuilds local Docker images even if already present
          remote-name:
            type: string
            default: origin
            description: Specifies the Git remote name for retrieving the repo URL
          reuse:
            type: boolean
            default: false
            description: Prevents container removal after successful runs for maintaining state
          input-file:
            type: string
            default: .input
            description: Path to the file containing action inputs
          var-file:
            type: string
            default: .vars
            description: Path to the file containing variable definitions
          additional-act-flags:
            type: string
            default: ""
            description: Additional flags to be passed to the `act` CLI
          skip-install:
            type: boolean
            default: false
            description: Skips installing Act
          skip-create-env-and-secret-file:
            type: boolean
            default: false
            description: Skips generating env and secret files
          skip-create-workflow-file:
            type: boolean
            default: false
            description: Skips creating the workflow file
        steps:
          - when:
              condition: << parameters.checkout >>
              steps:
                - checkout
          - when:
              condition: 
                not: << parameters.skip-install >>
              steps:
                - install:
                    version: << parameters.version >>
                    debug: << parameters.debug >>
                    bin-dir: << parameters.bin-dir >>
          - when:
              condition: 
                not: << parameters.skip-create-env-and-secret-file >>
              steps:
                - create-env-and-secret-file:
                    env-file: << parameters.env-file >>
                    secret-file: << parameters.secret-file >>
                    secrets: << parameters.secrets >>
          - when:
              condition: 
                not: << parameters.skip-create-workflow-file >>
              steps:
                - create-workflow-file:
                    workflow-file: << parameters.workflow-file >>
                    action: << parameters.uses >>
                    with: << parameters.with >>
                    env: << parameters.env >>
                    workflow-name: << parameters.workflow-name >>
                    workflow-event: << parameters.workflow-event >>
                    job-name: << parameters.job-name >>
                    runs-on-image: << parameters.runs-on-image >>
          - run-act:
              workflow-file: << parameters.workflow-file >>
              platform: << parameters.platform >>
              env-file: << parameters.env-file >>
              secret-file: << parameters.secret-file >>
              event-file: << parameters.event-file >>
              actor: << parameters.actor >>
              bind: << parameters.bind >>
              verbose: << parameters.verbose >>
              detect-event: << parameters.detect-event >>
              directory: << parameters.directory >>
              action-offline-mode: << parameters.action-offline-mode >>
              cache-actions: << parameters.cache-actions >>
              defaultbranch: << parameters.defaultbranch >>
              job: << parameters.job >>
              pull: << parameters.pull >>
              rebuild: << parameters.rebuild >>
              remote-name: << parameters.remote-name >>
              reuse: << parameters.reuse >>
              input-file: << parameters.input-file >>
              var-file: << parameters.var-file >>
              additional-act-flags: << parameters.additional-act-flags >>


    executors:
      default:
        description: Default executor environment for running the Act Orb using machine executors
        parameters:
          image:
            type: string
            default: ubuntu-2404:current
            description: Specifies the machine image to use for the executor
          docker_layer_caching:
            type: boolean
            default: false
            description: Enables Docker layer caching during builds
          resource_class:
            type: string
            default: large
            description: Specifies the resource class for the executor
        machine:
          image: << parameters.image >>
          docker_layer_caching: << parameters.docker_layer_caching >>
        resource_class: << parameters.resource_class >>


    jobs:
      act:
        description: Handles setting up the needed environment and running Act using the default executor
        parameters:
          checkout:
            type: boolean
            default: true
            description: Checkout the CircleCI repository before running Act
          version:
            type: string
            default: "latest"
            description: The version of Act to install
          debug:
            type: boolean
            default: false
            description: Enable debug logging for installing Act
          bin-dir:
            type: string
            default: "/home/circleci/bin"
            description: The directory where Act should be installed
          env-file:
            type: string
            default: /tmp/act.env
            description: Path to store or fetch the environment variables file
          secret-file:
            type: string
            default: /tmp/act.secrets
            description: Path to store or fetch the secret variables file
          secrets:
            type: string
            default: GITHUB_TOKEN
            description: A comma-separated list of environment variables treated as secrets
          workflow-file:
            type: string
            default: /tmp/workflow.yml
            description: Path to store or fetch the workflow file to execute
          uses:
            type: string
            default: ""
            description: The GitHub Action to execute (e.g. actions/checkout@v2)
          with:
            default: ""
            type: string
            description: Key-value pairs for the `with` block
          env:
            type: string
            default: ""
            description: Key-value pairs for the `env` block
          workflow-name:
            type: string
            default: "circleci"
            description: Name of the workflow
          workflow-event:
            type: string
            default: "push"
            description: Event that triggers the workflow (e.g. push, pull_request)
          job-name:
            type: string
            default: "action"
            description: Name of the job
          runs-on-image:
            type: string
            default: "ubuntu-latest"
            description: Image to run the job on (e.g. ubuntu-latest, windows-latest)
          platform:
            type: string
            default: ubuntu-latest=node:16-buster-slim
            description: Custom image to use per platform
          event-file:
            type: string
            default: /tmp/act.event
            description: Path to the event JSON file
          actor:
            type: string
            default: nektos/act
            description: User that triggered the event
          bind:
            type: boolean
            default: true
            description: Enables the bind flag which binds working directory to container, rather than copy
          verbose:
            type: boolean
            default: false
            description: Enables detailed output logs
          detect-event:
            type: boolean
            default: true
            description: Automatically detects and uses the first event type in the workflow
          directory:
            type: string
            default: .
            description: Working directory for the workflow
          action-offline-mode:
            type: boolean
            default: false
            description: Enable offline mode for actions (runs without fetching actions from remote sources)
          cache-actions:
            type: boolean
            default: true
            description:  Enables caching of GitHub Actions using CircleCI caching
          defaultbranch:
            type: string
            default: main
            description: Specifies the default branch to use
          job:
            type: string
            default: ""
            description: Specifies a specific job ID to run
          pull:
            type: boolean
            default: false
            description: Forces pulling of Docker images even if already present
          rebuild:
            type: boolean
            default: false
            description: Rebuilds local Docker images even if already present
          remote-name:
            type: string
            default: origin
            description: Specifies the Git remote name for retrieving the repo URL
          reuse:
            type: boolean
            default: false
            description: Prevents container removal after successful runs for maintaining state
          input-file:
            type: string
            default: .input
            description: Path to the file containing action inputs
          var-file:
            type: string
            default: .vars
            description: Path to the file containing variable definitions
          additional-act-flags:
            type: string
            default: ""
            description: Additional flags to be passed to the `act` CLI
          skip-install:
            type: boolean
            default: false
            description: Skips installing Act
          skip-create-env-and-secret-file:
            type: boolean
            default: false
            description: Skips generating env and secret files
          skip-create-workflow-file:
            type: boolean
            default: false
            description: Skips creating the workflow file
          executor:
            type: executor
            default: default
            description: The type of executor to use with Act
        executor: << parameters.executor >>
        steps:
          - act:
              version: << parameters.version >>
              debug: << parameters.debug >>
              bin-dir: << parameters.bin-dir >>
              env-file: << parameters.env-file >>
              secret-file: << parameters.secret-file >>
              secrets: << parameters.secrets >>
              workflow-file: << parameters.workflow-file >>
              uses: << parameters.uses >>
              with: << parameters.with >>
              env: << parameters.env >>
              workflow-name: << parameters.workflow-name >>
              workflow-event: << parameters.workflow-event >>
              job-name: << parameters.job-name >>
              runs-on-image: << parameters.runs-on-image >>
              platform: << parameters.platform >>
              event-file: << parameters.event-file >>
              actor: << parameters.actor >>
              bind: << parameters.bind >>
              verbose: << parameters.verbose >>
              detect-event: << parameters.detect-event >>
              directory: << parameters.directory >>
              action-offline-mode: << parameters.action-offline-mode >>
              cache-actions: << parameters.cache-actions >>
              defaultbranch: << parameters.defaultbranch >>
              job: << parameters.job >>
              pull: << parameters.pull >>
              rebuild: << parameters.rebuild >>
              remote-name: << parameters.remote-name >>
              reuse: << parameters.reuse >>
              input-file: << parameters.input-file >>
              var-file: << parameters.var-file >>
              additional-act-flags: << parameters.additional-act-flags >>
              skip-install: << parameters.skip-install >>
              skip-create-env-and-secret-file: << parameters.skip-create-env-and-secret-file >>
              skip-create-workflow-file: << parameters.skip-create-workflow-file >>


    examples:
      simple_act_usage:
        description: |
          Run a GitHub Action using the `act` orb. This example utilizes the job built into the orb.
          This will run the `actions/hello-world-javascript-action` action with the specified `with` inputs and `env` variables.
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          workflows:
            main:
              jobs:
                - act/act:
                    name: "Hello World Javascript Action"
                    uses: actions/hello-world-javascript-action@v1.1
                    with: |
                      who-to-greet: "Mona the Octocat"
                    env: |
                      hello-world: "example-value"

      simple_command_usage:
        description: |
          Run a GitHub Action using the `act` orb. This example utilizes the command built into the orb, which requires the users to specify the execution environment.
          This will run the `actions/hello-world-javascript-action` action with the specified `with` inputs and `env` variables.
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          jobs:
            simple_command_usage:
              machine:
                - image: ubuntu-2404:current
              resource_class: arm.large
              steps:
                - act/act:
                    uses: actions/hello-world-javascript-action@v1.1
                    with: |
                      who-to-greet: "Mona the Octocat"
                    env: |
                      hello-world: "example-value"
          workflows:
            main:
              jobs:
                - simple_command_usage

      passing_workflow_file:
        description: |
          Skip workflow file generation and pass a pre-existing GitHub Action workflow file to the Act job.
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          workflows:
            main:
              jobs:
                - act/act:
                    workflow-file: .github/workflows/workflow.yml
                    skip-create-workflow-file: true

      avoid_token_error:
        description: |
          GitHub automatically provides a GITHUB_TOKEN secret when running workflows inside GitHub. 
          If your workflow fails with an error about token, it most likely requires GITHUB_TOKEN to be set up. 
          If your workflow depends on this token, you need to create a personal access token and pass it to the Act job.
          Please utilizes CircleCI's built in secret management and set GITHUB_TOKEN as environment variable. In this example
          CircleCI's contexts are used to inject the GITHUB_TOKEN secret into the Act job.

          Please see Act's documentation for more details on injecting secrets: https://nektosact.com/usage/index.html?highlight=matrix#secrets
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          workflows:
            main:
              jobs:
                - act/act:
                    uses: aquasecurity/trivy-action@master
                    with: |
                      scan-type: fs
                      ignore-unfixed: true
                      format: sarif
                      output: report.sarif
                      scanners: vuln,secret,misconfig,license
                    platform: ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest
                    context: act

      override_default_platform_image:
        description: |
          GitHub Actions offers managed virtual environments for running workflows. 
          In order for act to run your workflows locally, it must run a container for the runner defined in your workflow file.
          The default images do not contain all the tools that GitHub Actions offers by default in their runners due to size constraints. 
          You can override the default container by specifying a different image in the `platform` parameter.

          Please see Act's documentation for more details on available images: https://nektosact.com/usage/runners.html#default-runners-are-intentionally-incomplete
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          workflows:
            main:
              jobs:
                - act/act:
                    uses: aquasecurity/trivy-action@master
                    with: |
                      scan-type: fs
                      ignore-unfixed: true
                      format: sarif
                      output: report.sarif
                      scanners: vuln,secret,misconfig,license
                    platform: ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest
                    context: act

      override_executor:
        description: |
          An example of overriding the machine executor for a job. This can be useful if you need to run action on a specific machine type.
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          workflows:
            main:
              jobs:
                - act/act:
                    uses: actions/hello-world-javascript-action@v1.1
                    with: |
                      who-to-greet: "Mona the Octocat"
                    env: |
                      hello: world
                    executor:
                      image: android:2024.11.1
                      resource_class: medium 
                      docker_layer_caching: true

      run_on_remote_docker:
        description: |
          Run a GitHub Action using the `act` orb on a remote Docker container. The default executor is `machine` but Act will work
          with the `docker` executor if you enable remote docker.
        usage:
          version: "2.1"
          orbs:
            act: circleci/act@x.y.z
          jobs:
            run_on_remote_docker:
              docker:
                - image: cimg/base:current
              steps:
                - setup_remote_docker
                - act/act:
                    uses: actions/hello-world-javascript-action@v1.1
                    with: |
                      who-to-greet: "Mona the Octocat"
                    env: |
                      hello-world: "example-value"
          workflows:
            main:
              jobs:
                - run_on_remote_docker


jobs:
  simple_command_usage:
    machine:
      image: ubuntu-2404:current
    resource_class: arm.large
    steps:
      - act/act:
          uses: actions/hello-world-javascript-action@v1.1
          with: |
            who-to-greet: "Mona the Octocat"
          env: |
            hello-world: "example-value"

  run_on_remote_docker:
    docker:
      - image: cimg/base:current
    steps:
      - setup_remote_docker
      - act/act:
          uses: actions/hello-world-javascript-action@v1.1
          with: |
            who-to-greet: "Mona the Octocat"
          env: |
            hello-world: "example-value"


workflows:
  main:
    jobs:
      - act/act:
          uses: aquasecurity/trivy-action@master
          with: |
            scan-type: fs
            ignore-unfixed: true
            format: sarif
            output: report.sarif
            scanners: vuln,secret,misconfig,license
          verbose: true
          platform: ubuntu-latest=ghcr.io/catthehacker/ubuntu:act-latest
          context: act
          executor:
            name: act/default
            resource_class: medium
            docker_layer_caching: true
      - act/act:
          name: "Hello world Example"
          uses: actions/hello-world-javascript-action@v1.1
          with: |
            who-to-greet: "Mona the Octocat"
          env: |
            hello: world
      - simple_command_usage
      - act/act:
          name: Passing in workflow file
          workflow-file: ./hello-world.yml
          # skip-create-workflow-file: true
      - act/act:
          name: Override executor
          uses: actions/hello-world-javascript-action@v1.1
          with: |
            who-to-greet: "Mona the Octocat"
          env: |
            hello: world
          executor:
            name: act/default
            image: android:2024.11.1
            resource_class: medium 
            docker_layer_caching: true
      - run_on_remote_docker:
          name: "Run on Remote Docker"